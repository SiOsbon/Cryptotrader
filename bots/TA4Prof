#################################################
#			                                    #
#  Name: TA4Prof 	                            #
#			                                    #
#  Description: Simple trading strategy         #
#  using MACD, RSI and Ichimoku Cloud TA        #
#  (based on Tweakaholic Framework v2.1 and     #
#  on Thanasis "ALL INDICATORS Code")           #
#  Author: 	MaxProf		                        #
#  Date: 	05.11.2017                  		#
#  Version: 	2.1                             #
#						                        #
#################################################
#
# Change log
# 0.9 prerelease version
# 1.0 Ichimiku Cloud TA added
# 2.0 New release
# 2.1 small updates

# Libraries
trading = require 'trading'
talib = require 'talib'
params = require 'params'
# Libraries

# Configurable Parameters
XXX                 = params.add '▼ TRADING SETTINGS (not implemented yet!)',false
TradingCurrency     = params.add '    •% of Currency used for trading', 100 # default value is 100
GLMargin            = params.add '    •Gain/Loss Margin (% less than Max price)', 3 # default value is 3%
StopAfterFirstSell  = params.add '    •Stop after first sell', false # default value is false
RebuyLower          = params.add '    •Rebuy lower than the last sell', false # default value is false
XXX                 = params.add '▼ TA',false
MACDsignal          = params.add '    •MACD', true # default value is true
RSIsignal           = params.add '    •RSI', true # default value is false
ICHIsignal          = params.add '    •Ichimiku Cloud', false # default value is false
PLOT                = params.add '▼ PLOT',true
MACDplot            = params.add '    •MACD graph', true # default value is true
RSIplot             = params.add '    •RSI graph', true # default value is false
ICHIplot            = params.add '    •Ichimiku Cloud graph', false # default value is false
XXX                 = params.add '▼ DEBUG',false
DEBUG_LEVEL         = params.addOptions '    •Level',['None','Logging','Debugging'],'Logging'
# Configurable Parameters

class Init
  @init: (context) ->
      
    # BOT
    storage.bot = {name: "TA4Prof", version: "2.1", author: "MaxProf", description: "Simple trading strategy based on MACD, RSI and Ichimoku Cloud TA"}
    debug "#{storage.bot.name} trading bot." 
    debug "Author: #{storage.bot.author}"
    debug "Version: #{storage.bot.version}"
    debug "Description: #{storage.bot.description}"
    # BOT
    
    # bot  
    
    # Config
    context.config = {}
    context.config.macd =  MACDsignal
    context.config.rsi = RSIsignal
    context.config.ichi = ICHIsignal
    # Config
    context.lag  = 1
    
    context.ha = new HeikinAshi(3)
    
    # RSI
    context.period = 20
    # RSI
    
    # MACD
    context.FastPeriod = 12    
    context.SlowPeriod = 26 
    context.SignalPeriod = 9
    # MACD
    
    # ICHI
    context.ichi = new Ichimoku(8, 11, 11, 11, 10)
    # ICHI
    
    # TRADING
    context.trading = true
    context.buyings = 0
    context.sellings = 0
    # TRADING
    
    # GRAPH
    context.graphHist = true 
    # GRAPH
    context.PLOT = PLOT
    context.MACDplot = MACDplot
    context.RSIplot = RSIplot
    #debug "RSI = #{context.RSIplot}"
    context.ICHIplot = ICHIplot
    context.init = true
    setPlotOptions
        ink_1:
            color: 'gree'
        ink_2:
            color: 'red'

class TA
  
####### All TA-lib Indicatots ##################### 

  @rsi: (data, lag, period) ->
        results = talib.RSI
            inReal: data
            startIdx: 0
            endIdx: data.length - lag
            optInTimePeriod: period
        _.last(results)
  
  @macd: (data, lag, FastPeriod,SlowPeriod,SignalPeriod) ->
    results = talib.MACD
     inReal: data
     startIdx: 0
     endIdx: data.length - lag
     optInFastPeriod: FastPeriod
     optInSlowPeriod: SlowPeriod
     optInSignalPeriod: SignalPeriod
    result =
      macd: _.last(results.outMACD)
      signal: _.last(results.outMACDSignal)
      histogram: _.last(results.outMACDHist)
    result

# Ichimoku
class Ichimoku
  constructor: (@tenkan_n = 8, @kijun_n = 11, @senkou_a_n = 11 , @senkou_b_n = 11, @chikou_n = 10) ->
    @price = 0.0
    @tenkan = 0.0
    @kijun = 0.0
    @senkou_a = []
    @senkou_b = []
    @chikou = []

  # get current ichimoku state
  current: ->
    c =
      price: @price
      tenkan: @tenkan
      kijun: @kijun
      senkou_a: @senkou_a[0]
      senkou_b: @senkou_b[0]
      chikou_span: Utils.diff(@chikou[@chikou.length - 1], @chikou[0])
    return c

  # update with latest instrument price data
  put: (ins) ->
    # update last close price
    @price = ins.close[ins.close.length - 1]
    # update tenkan sen
    @tenkan = this._hla(ins, @tenkan_n)
    # update kijun sen
    @kijun = this._hla(ins, @kijun_n)
    # update senkou span a
    @senkou_a.push((@tenkan + @kijun) / 2)
    Utils.splice(@senkou_a, @senkou_a_n)
    # update senkou span b
    @senkou_b.push(this._hla(ins, @senkou_b_n * 2))
    Utils.splice(@senkou_b, @senkou_b_n)
    # update chikou span
    @chikou.push(ins.close[ins.close.length - 1])
    Utils.splice(@chikou, @chikou_n)

  # calc average of price extremes (high-low avg) over specified period
  _hla: (ins, n) ->
    hh = _.max(ins.high[-n..])
    ll = _.min(ins.low[-n..])
    return (hh + ll) / 2 
# Ichimoku

# Heikin-Ashi Candles
class HeikinAshi
  constructor: (@ha_method = 3) ->
    @ins =
      open: []
      close: []
      high: []
      low: []
      volumes: []

  # update with latest instrument price data
  put: (ins) ->
    # push raw volume
    @ins.volumes.push(ins.volumes[ins.volumes.length - 1])

    # current raw candle (open/close/high/low)
    curr_open = ins.open[ins.open.length - 1]
    curr_close = ins.close[ins.close.length - 1]
    curr_high = ins.high[ins.high.length - 1]
    curr_low = ins.low[ins.low.length - 1]
    if @ha_method <= 0
      # HA Disabled!
      @ins.open.push(curr_open)
      @ins.close.push(curr_close)
      @ins.high.push(curr_high)
      @ins.low.push(curr_low)

   
    if @ha_method == 3
      # HA Method 3 - similar to method 2 except open is based on
      # previous raw candle instead of previous HA candle.
      if @ins.open.length == 0
        # initial candle
        @ins.open.push(curr_open)
        @ins.close.push(curr_close)
        @ins.high.push(curr_high)
        @ins.low.push(curr_low)
      else
        # every other candle
        # previous raw candle open/close
        prev_open = ins.open[ins.open.length - 2]
        prev_close = ins.close[ins.close.length - 2]
        # calculate current ha candle
        curr_open_ha = (prev_open + prev_close) / 2
        curr_close_ha = (curr_open + curr_close + curr_high + curr_low) / 4
        @ins.open.push(curr_open_ha)
        @ins.close.push(curr_close_ha)
        @ins.high.push(_.max([curr_high, curr_open_ha, curr_close_ha]))
        @ins.low.push(_.min([curr_low, curr_open_ha, curr_close_ha]))

    # restrict array lengths to reasonable max
    _max_length = 250
    Utils.splice(@ins.open, _max_length)
    Utils.splice(@ins.close, _max_length)
    Utils.splice(@ins.high, _max_length)
    Utils.splice(@ins.low, _max_length)
    Utils.splice(@ins.volumes, _max_length)
# Heikin-Ashi Candles
 
# Other Functions
class Utils  
  # Function Report #    
  @reports_: (ins, lastCurrency, lastAsset, firstCurrency, firstAsset, firstAssetPrice)  ->
      firstBalance = firstAsset * firstAssetPrice + firstCurrency
      lastBalance = lastAsset * ins.price + lastCurrency
      lastBalanceBH = firstAsset * ins.price + firstCurrency
      firstBalanceAsset = firstAsset + (firstCurrency / firstAssetPrice)  
      lastBalanceAsset = lastAsset + (lastCurrency / ins.price)
      result =   
        firstbalance: firstBalance
        lastbalance:  lastBalance 
        #efficiency: _.floor(((lastBalance / firstBalance) * 100), 2)
        efficiency: _.floor(Utils.diff(lastBalance, firstBalance), 2)
        #bh: _.floor(((lastBalanceBH / firstBalance) * 100), 2)
        bh: _.floor(Utils.diff(lastBalanceBH, firstBalance), 2)
        #accumulation_efficiency: _.floor(((lastBalanceAsset / firstBalanceAsset) * 100), 2)
        accumulation_efficiency: _.floor(Utils.diff(lastBalanceAsset, firstBalanceAsset), 2)
      result
  # Functions Report # 
  
  # populates the target array with instrument price data
  @populate: (target, ins) ->
    for i in [0..ins.close.length - 1]
      t =
        open: ins.open[..i]
        close: ins.close[..i]
        high: ins.high[..i]
        low: ins.low[..i]
        volumes: ins.volumes[..i]
      target.put(t)
  # populates the target array with instrument price data
  
  # restrict array length to specified max
  @splice: (arr, l) ->
    while arr.length > l
      arr.splice(0, 1)
      
  # percent difference between values
  @diff: (x, y) ->
    ((x - y) / ((x + y) / 2)) * 100      
# Other Functions  

class Strategy
  @decision: (config, instrument, indicators, lastAssetPrice, trade) ->
    result = false    
    #debug "Strategy:"
    #debug " MACD signal: #{config.macd}"
    #debug " RSI signal: #{config.rsi}"
    #debug " ICHIMOKU cloud: #{config.ichi}"
    if trade # buy
        if !(indicators.macd.histogram >= 0) and config.macd 
            #debug "MACD #{indicators.macd.histogram}"
            MACD = false
        else
            MACD = true
        if !(indicators.rsi < 40) and config.rsi
            RSI = false
        else
            RSI = true
        if !((instrument.price > indicators.ichi.senkou_b) && (indicators.ichi.senkou_a > indicators.ichi.senkou_b)) and config.ichi
            ICHI = false 
        else
            ICHI = true
        
        #debug "MACD = #{MACD}"
        #debug "RSI = #{RSI}"
        #debug "ICHI = #{ICHI}"
        
        if (MACD && RSI && ICHI)
            #debug "BUY!"
            result = true
        else 
           result = false
            
    else # sell
        if !(indicators.macd.histogram <= 0) && config.macd 
            MACD = false
        else
            MACD = true
        if !(indicators.rsi > 60) && config.rsi
            RSI = false
        else
            RSI = true
        if !((instrument.price < indicators.ichi.senkou_a) && (indicators.ichi.senkou_a < indicators.ichi.senkou_b)) and config.ichi
            ICHI = false
        else
            ICHI = true
        
        #debug "MACD = #{MACD}"
        #debug "RSI = #{RSI}"
        #debug "ICHI = #{ICHI}"
        
        if (MACD && RSI && ICHI)
            #debug "SELL!"
            result = true
        else
            result = false
    result

init: (context) ->

    Init.init context

handle: (context, data)->

    instrument =  data.instruments[0]
    storage.firstAssetPrice ?= instrument.price
    storage.lastAssetPrice ?= instrument.price
    storage.maxAssetPrice ?= instrument.price
    
    storage.rsiBand ?= instrument.price 
    storage.botStartedAt ?= data.at
    assetsTotal = @portfolios[instrument.market].positions[instrument.asset()].amount
    #assetsAvailable = assetsTotal
    currencyTotal = @portfolios[instrument.market].positions[instrument.curr()].amount
    #currencyAvailable = (TradingCurrency * currencyTotal)/100
    
    
    storage.firstBalance ?= assetsTotal * instrument.price + currencyTotal
    storage.firstAsset ?= assetsTotal
    storage.firstCurrency ?= currencyTotal

    ##### TA  ####### 
    indicators = {}
    indicators.macd = TA.macd(instrument.close, context.lag, context.FastPeriod,context.SlowPeriod,context.SignalPeriod)
    indicators.rsi  = TA.rsi(instrument.close,context.lag,context.period)
    if context.init
        # initialise heikin-ashi
        Utils.populate(context.ha, instrument)
        # initialise ichimoku (from heikin-ashi data)
        Utils.populate(context.ichi, context.ha.ins)
        # initialisation complete
        context.init = false
    else
    #    # handle new instrument (via heikin-ashi)
        context.ha.put(instrument)
        # initialise ichimoku (from heikin-ashi data)
        context.ichi.put(context.ha.ins)
    
    c = context.ichi.current()
    
    ichi =
      tk_diff: Utils.diff(c.tenkan, c.kijun)
      tenkan_min: _.min([c.tenkan, c.kijun])
      tenkan_max: _.max([c.tenkan, c.kijun])
      kumo_min: _.min([c.senkou_a, c.senkou_b])
      kumo_max: _.max([c.senkou_a, c.senkou_b])
    # copy in current ichi state
    for own key of c
      ichi[key] = c[key]
    indicators.ichi = ichi
    
    # historic price values to be used with signals
    price = context.ha.ins.close
    
    ##### TA  #######
    
    # Plotting    
    
    plot
        Price: 
            instrument.price
    if context.MACDplot && context.PLOT
        if context.graphHist 
            graphHist = storage.firstAssetPrice * 0.80
            context.graphHist = false
        else     
            graphHist = indicators.macd.histogram * 10 + storage.firstAssetPrice * 0.80
            context.graphHist = true
        plot
    
        #MACD: macd.macd * 10 + storage.firstAssetPrice * 0.95
        #SIGNAL: macd.signal * 10 + storage.firstAssetPrice * 0.95
            'MACD HISTOGRAM': 
                indicators.macd.histogram * 10 + storage.firstAssetPrice * 0.80
            "histogram ground": 
                storage.firstAssetPrice * 0.80
            "histogram graph":
                graphHist   
                
    if context.RSIplot && context.PLOT
        plot
            'RSI': 
                storage.firstAssetPrice * 0.60 + (indicators.rsi * (storage.rsiBand / 400))    
            'rsi low 40': 
                storage.firstAssetPrice * 0.60 + (40 * (storage.rsiBand / 400))
            'rsi high 60': 
                storage.firstAssetPrice * 0.60 + (60 * (storage.rsiBand / 400))
        
    
    # plot code
    if context.ICHIplot && context.PLOT      
    
        if ichi.senkou_a > ichi.senkou_b
            graph2 = indicators.ichi.senkou_a *2.5 - _.last(price)*1.5
            if context.ink_1
                graph1 = indicators.ichi.senkou_a *2.5 - _.last(price)*1.5
                context.ink_1 = false
            else    
                graph1 = indicators.ichi.senkou_b *2.5 - _.last(price)*1.5
                context.ink_1 = true
        else
            graph1 = indicators.ichi.senkou_b *2.5 - _.last(price)*1.5
            if context.ink_2
                graph2 = indicators.ichi.senkou_a *2.5 - _.last(price)*1.5
                context.ink_2 = false
            else 
                graph2 = indicators.ichi.senkou_b *2.5 - _.last(price)*1.5
                context.ink_2 = true
    
        plot
            price: _.last(price)
            #short: short
            #long: long
            tenkan: indicators.ichi.tenkan * 2.5 - _.last(price)*1.5
            kijun: indicators.ichi.kijun * 2.5 - _.last(price)*1.5
            senkou_a: indicators.ichi.senkou_a * 2.5 - _.last(price)*1.5
            senkou_b: indicators.ichi.senkou_b * 2.5 - _.last(price)*1.5
            #tenkan: ind.ichi.tenkan
            #kijun: ind.ichi.kijun
            #senkou_a: ind.ichi.senkou_a
            #senkou_b: ind.ichi.senkou_b
            ink_1: graph1
            ink_2: graph2
    # plot code        
    # Plotting
    
    #Strategy.decision context.config, instrument, indicators, storage.lastAssetPrice
    
      
    if storage.maxAssetPrice > instrument.price
        storage.maxAssetPrice = instrument.price
    
    # Strategy #  
    
    if context.trading 
        #debug "Start buy!"
        #if (indicators.rsi < 40 && indicators.macd.histogram >= 0) &&  context.trading && ((storage.lastAssetPrice >= instrument.price) || !context.buyings)
        #if (macd.histogram >= 0) &&  context.trading && ((storage.lastAssetPrice >= instrument.price) || !context.buyings)
        #if (indicators.rsi < 40 && indicators.macd.histogram >= 0) 
        #if (rsi < 40 && macd.histogram >= 0) #&& ((storage.lastAssetPrice >= instrument.price) || !context.buyings)
        if Strategy.decision context.config, instrument, indicators, storage.lastAssetPrice, context.trading
            debug "Buy signal: MACD Histogram = #{indicators.macd.histogram} and RSI = #{indicators.rsi}"
            if currencyTotal 
                if trading.buy instrument #, "limit", currencyTotal / (instrument.price * 2), instrument.price * 1.005
                    storage.lastAssetPrice = instrument.price
                    context.buyings += 1
                    context.trading = false
            else
                context.trading = false
    
    else     
        #debug "Start sell!"
        #if ((indicators.rsi > 60 && indicators.macd.histogram <= 0) && !context.trading) && ((storage.lastAssetPrice <= instrument.price) || !context.sellings)
        #if ((macd.histogram <= 0) && !context.trading) && ((storage.lastAssetPrice <= instrument.price) || !context.sellings)
        #if (indicators.rsi > 60 && indicators.macd.histogram <= 0) 
        #if (rsi > 60 && macd.histogram <= 0) #&& ((storage.lastAssetPrice <= instrument.price) || !context.sellings)
        if Strategy.decision context.config, instrument, indicators, storage.lastAssetPrice, context.trading
            debug "Sell signal: MACD Histogram = #{indicators.macd.histogram} and RSI = #{indicators.rsi}"
            if assetsTotal
                if trading.sell instrument #, "limit", assetsTotal / 2, instrument.price * 0.995
                    context.sellings += 1
                    context.trading = true
                    storage.lastAssetPrice = instrument.price
            else
                context.trading = true    
    # Strategy #
    
serialize: (context) ->
  # serialize bot state

onRestart: ->
#	debug "Restart detected"
    instrument = data.instruments[0]
    
    assetsTotal = @portfolios[instrument.market].positions[instrument.asset()].amount
    assetsAvailable = assetsTotal
    currencyTotal = @portfolios[instrument.market].positions[instrument.curr()].amount
    currencyAvailable = currencyTotal
    result = Utils.reports_ instrument, currencyTotal, assetsTotal, storage.firstCurrency, storage.firstAsset, storage.firstAssetPrice 
    
    info "_____BOT RESTARTED____"
    debug "Start price: #{storage.firstAssetPrice}"
    debug "Last price: #{storage.lastAssetPrice}"
    debug "Highest price: #{storage.maxAssetPrice}"
    
    debug "Sellings: #{context.sellings}"
    debug "Buyings: #{context.buyings}"
    
    #debug "Starting balance: #{storage.firstBalance} #{instrument.curr().toUpperCase()}"
    debug "Starting balance: #{result.firstbalance} #{instrument.curr().toUpperCase()}"
    debug "Ending Balance: #{result.lastbalance} #{instrument.curr().toUpperCase()}"
    debug "Bot/B&H: #{result.bh}%"
    debug "Bot efficiency: #{result.efficiency}%"
    debug "Bot efficiency (in Asset): #{result.accumulation_efficiency}%"
    debug "_________________________________________________________________"
    
# function onRestart #

# function onStop #
onStop: ->
#	debug "Stop detected"
    instrument = data.instruments[0]
    
    assetsTotal = @portfolios[instrument.market].positions[instrument.asset()].amount
    assetsAvailable = assetsTotal
    currencyTotal = @portfolios[instrument.market].positions[instrument.curr()].amount
    currencyAvailable = currencyTotal
    result = Utils.reports_ instrument, currencyAvailable, assetsAvailable, storage.firstCurrency, storage.firstAsset, storage.firstAssetPrice 
    
    info "_____BOT STOPED____"
    debug "Start price: #{storage.firstAssetPrice}"
    debug "Last price: #{storage.lastAssetPrice}"
    debug "Highest price: #{storage.maxAssetPrice}"
    
    debug "Sellings: #{context.sellings}"
    debug "Buyings: #{context.buyings}"
    
    #debug "Starting balance: #{storage.firstBalance} #{instrument.curr().toUpperCase()}"
    debug "Starting balance: #{result.firstbalance} #{instrument.curr().toUpperCase()}"
    debug "Ending Balance: #{result.lastbalance} #{instrument.curr().toUpperCase()}"
    debug "Bot/B&H: #{result.bh}%"
    debug "Bot efficiency: #{result.efficiency}%"
    debug "Bot efficiency (in Asset): #{result.accumulation_efficiency}%"
    debug "_________________________________________________________________"
    debug "Bot started at #{new Date(storage.botStartedAt)}"
    debug "Bot stopped at #{new Date(data.at)}"  	
# function onStop #        
